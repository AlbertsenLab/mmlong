#!/bin/bash
# mmlong miniasm-racon
# By SÃ¸ren Karst and Rasmus Kirkegaard
# Version
MINIASN_RACON_VERSION=0.1.1

################################################################################
### Preparation ----------------------------------------------------------------
################################################################################

### Description ----------------------------------------------------------------

USAGE="$(basename "$0") [-h] [-d folder -a file -o folder -l value -r value -t value -x] 
-- mmlong miniasm-racon v. $MINIASN_RACON_VERSION: Perform long read assembly using miniasm
                                  followed by Racon polishing.

where:
    -h  Show this help text.
    -d  Read data folder.
    -a  List of read data files to use.
    -o  Output folder. 
    -l  Minimum contig length.
    -r  Rounds of racon polishing.
    -t  Number of threads. Default is 40.
    -x  Run script on mmlong reassembly output assuming metaflow folder structure. 
"

### Terminal Arguments ---------------------------------------------------------

# Import user arguments
while getopts ':hzd:a:o:l:r:t:x' OPTION; do
  case $OPTION in
    h) echo "$USAGE"; exit 1;;
    d) DATA_DIR=$OPTARG;;
    a) DATA_LIST=`cat $OPTARG`;;
    o) OUT_DIR=$OPTARG;;
    l) MIN_LENGTH=$OPTARG;;
    r) NRACON=$OPTARG;;
    t) THREADS=$OPTARG;;
    x) XRUN=YES;;
    :) printf 'missing argument for -$OPTARG\n' >&2; exit 1;;
    \?) printf 'invalid option for -$OPTARG\n' >&2; exit 1;;
  esac
done

# Check missing arguments
MISSING="is missing but required. Exiting."
if [ -z ${XRUN+x} ]; then
  if [ -z ${DATA_DIR+x} ]; then
    printf "\n -d not defined. Specify path to bin folder.\n\n"
    echo "$USAGE"
    exit 1
  fi
  if [ -z ${DATA_LIST+x} ]; then
    printf "\n -a not defined. Specify list of data files to use for assembly.\n\n"
    echo "$USAGE"
    exit 1
  fi
  if [ -z ${OUT_DIR+x} ]; then
    printf "\n -o not defined. Specify output folder.\n\n"
    echo "$USAGE"
    exit 1
  fi
fi
if [ -z ${MIN_LENGTH+x} ]; then MIN_LENGTH=1000; fi;
if [ -z ${NRACON+x} ]; then NRACON=1; fi;
if [ -z ${THREADS+x} ]; then THREADS=40; fi;

### Path to dependencies
. $MMLONG_DIR/mmlong_tools/dependencies.sh

################################################################################
### Log settings ---------------------------------------------------------------
################################################################################

function logging {
  LOG_NAME="mmlong_miniasm-racon_log_$(date +%s).txt"
  exec > >(tee -a $OUT_DIR/$LOG_NAME)
  exec 2>&1
  echo "mmlong miniasm-racon log" >> $OUT_DIR/$LOG_NAME
  echo "Script start: $(date)" >> $OUT_DIR/$LOG_NAME
  echo "Settings:
  Script version: 	$MINIASN_RACON_VERSION
  Script call: 		$0 $*
  Data directory:	$DATA_DIR
  Data list:		$DATA_LIST
  Output directory:	$OUT_DIR
  Minimum contig length:$MIN_LENGTH
  Racon rounds:		$NRACON
  CPU threads:		$THREADS" >> $OUT_DIR/$LOG_NAME
}


################################################################################
### Workflow -------------------------------------------------------------------
################################################################################

# Miniasm assembly

function miniasm_assembly {
  # Arguments
  OD=$1
  DL=$2
  DD=$3
  NT=$4
  ML=$5 
  
  # Workflow
  printf "\nMiniasm assembly using [`echo $DL | tr -d '\n'`] \n\n"
  # Concatenate assembly data
  printf "\nConcatenate read data\n\n"
  if [ ! -f "$OD/np_all.fq" ]; then
    cat $(echo "$DL" | sed -e "s/^/$DD\\//" -e "s/$/*/" ) > $OD/np_all.fq
  fi
  # Read-read mapping
  printf "\nMinimap read-read mapping\n\n"
  $MINIMAP2 -t $NT -x ava-ont $OD/np_all.fq \
  $OD/np_all.fq > $OD/miniasm_minimap.paf
  # Assembly
  printf "\nMiniasm de novo assembly\n\n"
  $MINIASM -f $OD/np_all.fq $OD/miniasm_minimap.paf \
  > $OD/assembly_miniasm.gfa
  # Format assembly output
  awk '/^S/{print ">"$2"\n"$3}' $OD/assembly_miniasm.gfa |\
  awk '/^>/{print ">" ++i; next}{print}' | \
  awk -v seq_minlen="$ML" '
  !/^>/ { next } { getline seq } length(seq) >= seq_minlen { print $0 "\n" seq }' - \
  > $OD/assembly_miniasm.fa
}

# Racon polishing

function racon_polishing {
  # Arguments
  ASMB=$1
  OD=$2
  NR=$3
  NT=$4
  
  for ((N=1; N<=NR; N++)); do
    printf "\nRacon polishing round $N\n\n"
    $MINIMAP2 -x map-ont -t $NT $OD/$ASMB \
    $OD/np_all.fq > $OD/racon_minimap.paf
    $RACON -u -t $NT $OD/np_all.fq \
    $OD/racon_minimap.paf $OD/$ASMB \
    > $OD/racon_$N.fa
    sed -i '/^>/s/ .*//' $OD/racon_$N.fa
    ASMB=racon_$N.fa
  done
  mv $OD/racon_$NR.fa $OD/assembly_racon.fa
}

# Normal mode
if [ -z ${XRUN+x} ]; then
  mkdir -p $OUT_DIR
  logging
  miniasm_assembly $OUT_DIR "$DATA_LIST" $DATA_DIR $THREADS $MIN_LENGTH
  racon_polishing assembly_miniasm.fa $OUT_DIR $NRACON $THREADS
fi

# Batch mode
if [ "$XRUN" = "YES" ]; then
  for BIN_PATH in reassembly/*; do
    DATA_DIR=$BIN_PATH/data
    DATA_LIST=`ls -1 $BIN_PATH/data/*_nptrim_subset.fq | sed 's!.*/!!'`
    DATA_NAMES=`echo "$DATA_LIST" |\
    sed 's/_nptrim_subset.fq//g' |\
    paste -sd "+" -`
    BIN_NAME=`echo $BIN_PATH | sed -e 's!.*/!!' -e 's/\..*$//g'`
    OUT_DIR=$BIN_PATH/MR+${BIN_NAME}+${DATA_NAMES}
    mkdir -p $OUT_DIR
    mkdir -p $BIN_PATH/all_assembly
    logging
    miniasm_assembly $OUT_DIR "$DATA_LIST" $DATA_DIR $THREADS $MIN_LENGTH
    racon_polishing assembly_miniasm.fa $OUT_DIR $NRACON $THREADS
    cp $OUT_DIR/assembly_racon.fa \
    $BIN_PATH/all_assembly/MR+${BIN_NAME}+${DATA_NAMES}_mrassembly.fa
   done
fi

################################################################################
### Exit -----------------------------------------------------------------------
################################################################################
echo "Script end: $(date)" >> $OUT_DIR/$LOG_NAME
exit 0
